{
  "name": "canned",
  "version": "0.2.2",
  "description": "serve canned responses to mock an api, based on files in a folder",
  "main": "canned.js",
  "scripts": {
    "test": "make test",
    "start": "./bin/canned"
  },
  "bin": {
    "canned": "./bin/canned"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sideshowcoder/canned"
  },
  "dependencies": {
    "optimist": "~0.3.7"
  },
  "devDependencies": {
    "node-dev": "~2.0.1",
    "jasmine-node": "~1.10.2"
  },
  "engines": {
    "node": ">=0.10.3"
  },
  "keywords": [
    "mock",
    "api",
    "server"
  ],
  "author": {
    "name": "Philipp Fehre @sideshowcoder"
  },
  "license": "MIT",
  "readme": "Canned fake API server\n======================\n\n[![Build Status](https://travis-ci.org/sideshowcoder/canned.png?branch=master)](https://travis-ci.org/sideshowcoder/canned)\n\nView the docs on [Docs](http://sideshowcoder.github.io/canned)\n\nWorking with APIs, more often than not, during development you want to work\nwith a fixed version of the responses provided. This is especially true if the\nAPI is still under development, and maybe even still needs input on how to\noutput something. This is what Canned is for!\n\nWhat does it do?\n----------------\nCanned maps a folder structure to API responses\n\n    /comment/any.get.json\n    /comment/index.get.html\n\nrequests like\n\n    GET /comment/:id\n\nare served as\n\n    Content-Type: application/json\n    { \"content\": \"I am a comment\", \"author\": \"sideshowcoder\" }\n\nrequests like\n\n    GET /content/\n\nare served as\n\n    Content-Type: text/html\n    <html>\n      <body>Some html in here</body>\n    </html>\n\n\n\nAwesome! so what is supported?\n------------------------------\nCurrently Canned supports the basic REST-API mapping, as well as custom method\nmapping with nested endpoints.\n\n    file                            | resquest\n    /index.get.json                 | GET /\n    /any.get.json                   | GET /:id\n    /_search.get.json               | GET /search\n    /comments/index.get.json        | GET /comments/\n    /comments/any.get.json          | GET /comments/:id\n    /comments/_search.get.json      | GET /comments/search\n\nYou can even add query parameters to your filenames to return different responses on the same route. If the all query params in a filename match the incoming request, this file will be returned. It will fall back to returning the file with no query params if it exists.\n    \n    file                            | resquest\n    /index?name=Superman.get.json   | GET /?name=Superman&NotAllParams=NeedToMatch\n    /_search?q=hello.get.json       | GET /comments/search?q=hello\n    /_search.get.json               | GET /comments/search?iam=soignored        \n\nSame support is available for PUT, POST, etc.\n\n    /index.post.json            | POST serves /... + CORS Headers\n    /index.put.json             | PUT serves /... + CORS Headers\n\nIf CORS support is enabled additionally options will be available as a http verb\nand all requests will serve the CORS Headers as well\n\n    /                           | OPTIONS serve all the options needed for CORS\n    /index.get.json             | GET serves /... + CORS Headers\n\nIf you need some custum return codes, just add them to the file via adding a\nfile header like so\n\n    //! statusCode: 201\n    <html>\n      <body>Created something successfully! Happy!</body>\n    </html>\n\nThe header will be stripped before sending and the statusCode will be set.\n\nHow about some docs inside for the responses?\n---------------------------------------------\nMost content types support comments nativly, like html or javascript. Sadly the\nprobaly most used type (JSON) does not :(. So canned actually extends the JSON\nsyntax a little so it can include comments with _//_ or _/**/_. In case you use\nthe json files directly on the backend side as test cases make sure you strip\nthose out as well!\n\n\nOk I need this!\n---------------\nJust install via npm\n\n    $ npm install canned\n\nwhich will install it locally in node\\_modules, if you want to have it\navailable from anywhere just install globally\n\n    $ npm install -g canned\n\nHow do I use it\n---------------\nThere are 2 ways here, either you embed it somewhere programmatically\n\n    var canned = require('canned')\n    ,   http = require('http')\n    ,   opts = { cors: true, logger: process.stdout }\n\n    can = canned('/path/to/canned/response/folder', opts)\n\n    http.createServer(can).listen(3000)\n\nOr just run the provided canned server script\n\n    $ canned\n\nWhich serves the current folder with canned responses on port 3000\n\n    $ canned -p 5000 ./my/responses/\n\nwill serve the relative folder via port 5000\n\nIf for whatever reason you want to turn of CORS support do so via\n\n    $ canned --cors=false ./my/responses/\n\nAlso if you need additional headers to be served alongside the CORS headers\nthese can be added like this (thanks to runemadsen)\n\ncanned --headers \"Authorization, Another-Header\"\n\nFor more information checkout [the pull request](https://github.com/sideshowcoder/canned/pull/9)\n\n\nIt does not work :(\n-------------------\n\n### canned not found\nmake sure you either install globally or put ./node\\_modules/.bin in your PATH\n\n### it is still not found, and I installed globally\nmake sure /usr/local/share/npm/bin is in your path, this should be true for\nevery install since you won't be able to run any global module bins if not.\n(like express, and such)\n\n### the encoding looks wrong\nmake sure you run a version of node which is 0.10.3 or higher, because it fixes\na problem for the encoding handling when reading files\n\nContributors\n------------\n* [sideshowcoder](https://github.com/sideshowcoder)\n* [leifg](https://github.com/leifg)\n* [runemadsen](https://github.com/runemadsen)\n\nLicense\n-------\nMIT 2013 Philipp Fehre alias @sideshowcoder, or @ischi on twitter\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sideshowcoder/canned/issues"
  },
  "homepage": "https://github.com/sideshowcoder/canned",
  "_id": "canned@0.2.2",
  "_from": "canned@"
}
